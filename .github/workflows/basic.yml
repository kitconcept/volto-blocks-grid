name: kitconcept volto-blocks-grid basic tests
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
        python-version: [3.8]
    env:
        GIT_NAME: volto-blocks-grid
        NAMESPACE: "@kitconcept"
        DEPENDENCIES: ""

    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # node install
      - run: yarn install --frozen-lockfile

      - run: docker pull plone/volto-addon-ci

      # ESlint
      - name: ESlint
        run: docker run -i --rm --name="$GITHUB_RUN_ID-eslint" -e NAMESPACE="${{env.NAMESPACE}}" -e DEPENDENCIES="${{DEPENDENCIES}}" -e GIT_NAME=${{env.GIT_NAME}} -v $(pwd):/opt/frontend/my-volto-project/src/addons/${{env.GIT_NAME}} plone/volto-addon-ci eslint

      # - run: yarn run prettier
      # - run: yarn run stylelint

      # # node test
      # - run: yarn test

      # # python setup
      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # # python cache
      # - uses: actions/cache@v1
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      # # python install
      # - run: pip install virtualenv
      # - name: pip install
      #   working-directory: api
      #   run: pip install -r requirements.txt
      # - name: buildout
      #   working-directory: api
      #   run: buildout
      #   env:
      #     CI: true

      # # # cypress acceptance tests
      # # - name: Cypress acceptance tests
      # #   uses: cypress-io/github-action@v1

      # - name: Cypress acceptance tests
      #   run: yarn ci:cypress:run

      # # Upload Cypress screenshots
      # - uses: actions/upload-artifact@v1
      #   if: failure()
      #   with:
      #     name: cypress-screenshots
      #     path: cypress/screenshots
      # # Upload Cypress videos
      # - uses: actions/upload-artifact@v1
      #   if: always()
      #   with:
      #     name: cypress-videos
      #     path: cypress/videos

      # # Bundlewatch
      # - uses: jackyef/bundlewatch-gh-action@master
      #   with:
      #     bundlewatch-github-token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

